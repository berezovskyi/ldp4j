/**
 * Copyright (c) 2009-2011 the SEALS project consortium.
 * This file is part of the SEALS Platform,
 *
 *     http://www.seals-project.eu/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.sealsproject.platform.res.storage.testing.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.apache.commons.io.IOUtils;
import org.dbunit.DatabaseUnitException;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.ext.hsqldb.HsqldbDataTypeFactory;
import org.dbunit.operation.DatabaseOperation;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;

import eu.sealsproject.platform.res.logging.slf4j.EnhancedLogger;
import eu.sealsproject.platform.res.logging.slf4j.EnhancedLoggerFactory;
import eu.sealsproject.platform.res.storage.testing.IDbUnitUtils;
import eu.sealsproject.platform.res.storage.testing.PopulationException;
import eu.sealsproject.platform.res.storage.testing.ScriptExecutionException;

public abstract class AbstractDbUnitUtils implements IDbUnitUtils {

	private static final EnhancedLogger LOGGER=EnhancedLoggerFactory.getEnhancedLogger(AbstractDbUnitUtils.class);

	protected abstract DataSource getDataSource();

	private void populateData(InputStream is, InputStream dtdStream) throws PopulationException {
		Connection conn=null;
		try {
			if(LOGGER.isTraceEnabled()) {
				LOGGER.trace("Opening JDBC database connection...");
			}
			conn=getDataSource().getConnection();
			IDatabaseConnection connection=null;
			try {
				if(LOGGER.isTraceEnabled()) {
					LOGGER.trace("Opening DbUnit database connection...");
				}
				connection = new DatabaseConnection(conn);

				// Setup DBUnit the HSQLDB data type factory
				DatabaseConfig config = connection.getConfig();
				config.setProperty(
					DatabaseConfig.PROPERTY_DATATYPE_FACTORY,
					new HsqldbDataTypeFactory());

				// We suppose here that our data is encoded in a flat xml file
//				if(LOGGER.isTraceEnabled()) {
//					LOGGER.trace("Preparing resource as a flat XML data source...");
//				}
				
//				IDataSetProducer producer =  
//					new FlatXmlProducer(new InputSource(is));

//				if(LOGGER.isTraceEnabled()) {
//					LOGGER.trace("Enabling flat XML resource streaming...");
//				}
//				IDataSet dataSet = new StreamingDataSet(producer);

				FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();
				if(dtdStream!=null) {
					try {
						builder.setMetaDataSetFromDtd(dtdStream);
					} catch (IOException e) {
						throw new PopulationException("Could find DTD.",e);
					}
				}

				IDataSet dataSet = builder.build(is);
				
				try {
					// Insert the data
					if(LOGGER.isTraceEnabled()) {
						LOGGER.trace("Triggering data insertion...");
					}
					DatabaseOperation.INSERT.execute(connection, dataSet);
					if(LOGGER.isDebugEnabled()) {
						LOGGER.debug("Insertion completed.");
					}
				} catch (DatabaseUnitException e) {
					if(LOGGER.isDebugEnabled()) {
						LOGGER.debug("DbUnit insertion failure: "+e.getMessage());
						if(LOGGER.isTraceEnabled()) {
							LOGGER.trace("Full stacktrace follows: ",e);
						}
					}
					throw new PopulationException("DbUnit insertion failure.",e);
				} catch (SQLException e) {
					if(LOGGER.isDebugEnabled()) {
						LOGGER.debug("JDBC failure when inserting the data: "+e.getMessage());
						if(LOGGER.isTraceEnabled()) {
							LOGGER.trace("Full stacktrace follows: ",e);
						}
					}
					throw new PopulationException("JDBC failure when inserting the data.",e);
				} finally {
					IOUtils.closeQuietly(is);
				}
			} catch (DatabaseUnitException e) {
				if(LOGGER.isDebugEnabled()) {
					LOGGER.debug("Could not create a DbUnit database connection: "+e.getMessage());
					if(LOGGER.isTraceEnabled()) {
						LOGGER.trace("Full stacktrace follows: ",e);
					}
				}
				throw new PopulationException("Could not create a DbUnit database connection.",e);
			} finally {
				if(connection!=null) {
					try {
						if(LOGGER.isTraceEnabled()) {
							LOGGER.trace("Closing DbUnit database connection...");
						}
						connection.close();
						if(LOGGER.isTraceEnabled()) {
							LOGGER.trace("DbUnit database connection closed.");
						}
					} catch (SQLException e) {
						LOGGER.error("Could not close DbUnit connection. Full stacktrace follows.",e);
					}
				}
			}
		} catch (SQLException e) {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Could not create a JDBC database connection: "+e.getMessage());
				if(LOGGER.isTraceEnabled()) {
					LOGGER.trace("Full stacktrace follows: ",e);
				}
			}
			throw new PopulationException("Could not create a JDBC database connection.",e);
		} finally {
			if(conn!=null) {
				try {
					if(LOGGER.isTraceEnabled()) {
						LOGGER.trace("Closing JDBC database connection...");
					}
					conn.close();
					if(LOGGER.isTraceEnabled()) {
						LOGGER.trace("JDBC database connection closed.");
					}
				} catch (SQLException e) {
					LOGGER.error("Could not close JDBC connection. Full stacktrace follows.",e);
				}
			}
		}
		
	}

	private void executeScript(InputStream is) throws ScriptExecutionException {
		DataSource dataSource=getDataSource();

		try {
			String query = IOUtils.toString(is);
			if(LOGGER.isTraceEnabled()) {
				LOGGER.trace("  * SQL script:");
				LOGGER.debugBlock("    | ",query);
			}

			SimpleJdbcTemplate template = new SimpleJdbcTemplate(dataSource);
			try {
				int result=template.update(query);
				if(LOGGER.isDebugEnabled()) {
					LOGGER.debug("- Rows affected: "+result);
				}
			} catch (DataAccessException e) {
				throw new ScriptExecutionException("The SQL script could not be executed.",e);
			}
		} catch (IOException e) {
			throw new ScriptExecutionException("Could load SQL script.",e);
		}
	}
	
	@Override
	public void populateData(File dataResource) throws PopulationException {
		try {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Populating data file '"+dataResource.getAbsolutePath()+"'...");
			}
			populateData(new FileInputStream(dataResource),null);
		} catch (FileNotFoundException e) {
			throw new PopulationException("Invalid input file.",e);
		} 
	}

	@Override
	public void populateData(URL dataResource) throws PopulationException {
		try {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Populating data file '"+dataResource+"'...");
			}
			populateData(dataResource.openStream(),null);
		} catch (IOException e) {
			throw new PopulationException("Invalid input URL.",e);
		} 
	}

	@Override
	public void populateData(URL dataResource, URL dtdResource) throws PopulationException {
		try {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Populating data file '"+dataResource+"'...");
			}
			populateData(dataResource.openStream(),dtdResource.openStream());
		} catch (IOException e) {
			throw new PopulationException("Invalid input URL.",e);
		} 
	}

	@Override
	public void executeScript(File dataResource) throws ScriptExecutionException {
		try {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Executing script '"+dataResource.getAbsolutePath()+"'...");
			}
			executeScript(new FileInputStream(dataResource));
		} catch (FileNotFoundException e) {
			throw new ScriptExecutionException("Invalid input file.",e);
		} 
	}

	@Override
	public void executeScript(URL dataResource) throws ScriptExecutionException {
		try {
			if(LOGGER.isDebugEnabled()) {
				LOGGER.debug("Executing script '"+dataResource+"'...");
			}
			executeScript(dataResource.openStream());
		} catch (IOException e) {
			throw new ScriptExecutionException("Invalid input URL.",e);
		} 
	}

}